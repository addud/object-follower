/*
 *  TOPPERS/JSP Kernel
 *      Toyohashi Open Platform for Embedded Real-Time Systems/
 *      Just Standard Profile Kernel
 * 
 *  Copyright (C) 2000-2003 by Embedded and Real-Time Systems Laboratory
 *                              Toyohashi Univ. of Technology, JAPAN
 * 
 *  上記著作権者は，以下の (1)〜(4) の条件か，Free Software Foundation 
 *  によって公表されている GNU General Public License の Version 2 に記
 *  述されている条件を満たす場合に限り，本ソフトウェア（本ソフトウェア
 *  を改変したものを含む．以下同じ）を使用・複製・改変・再配布（以下，
 *  利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 * 
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，その適用可能性も
 *  含めて，いかなる保証も行わない．また，本ソフトウェアの利用により直
 *  接的または間接的に生じたいかなる損害に関しても，その責任を負わない．
 * 
 *  @(#) $Id: garbage.h,v 1.7 2003/12/20 06:51:58 takayuki Exp $
 */

// $Header: /home/CVS/configurator/base/garbage.h,v 1.7 2003/12/20 06:51:58 takayuki Exp $


#ifndef GARBAGE_H
#define GARBAGE_H

#ifdef _MSC_VER
#  pragma warning(disable:4290) //C++ の例外の指定は無視されます。関数が __declspec(nothrow) でないことのみ表示されます。
#  pragma warning(disable:4786) //デバッグ情報で識別子が255文字に切り捨てられました。
#endif

#include "base/testsuite.h"
#include <list>


    //動的に生成したオブジェクトをちゃんと破棄するためのゴミ箱ルーチン
class TrashBox
{
public:
    typedef std::list<class Garbage *>::iterator Cookie;

protected:
    static TrashBox *    current_box;   //現在使用しているゴミ箱
    TrashBox *           previous_box;  //このゴミ箱の親
    
    std::list<class Garbage *> garbage; //ごみ

public:
        //生成子 と 消滅子
    TrashBox(void)  throw();
    ~TrashBox(void) throw();

    inline bool isValid(void) const throw()
    {   return (this != 0);   }

        //ゴミ箱に入っているゴミを破棄
    void cleanup(void);

        //今使っているゴミ箱を取得
    inline static TrashBox * getCurrentTrashBox(void) throw()
    {   return current_box;   }

        //ゴミ投入
    inline Cookie addGarbage(class Garbage * _garbage) throw()
    {   return garbage.insert(garbage.begin(), _garbage);   }

        //ゴミ回収
    void recoverGarbage(Cookie cookie) throw();


        //動的に確保させたくない
    void * operator new (size_t) throw(std::bad_alloc)
    {   throw std::bad_alloc();   }
    void * operator new (size_t, std::nothrow_t) throw()
    {   return 0;   }

    TESTSUITE_PROTOTYPE(main)
};


    //ゴミ箱に入れるゴミオブジェクトの基底
class Garbage
{
private:
    class TrashBox *  assigned_box;
    TrashBox::Cookie  cookie;

public:
        //生成子 と 消滅子
    Garbage(void)  throw();
    virtual ~Garbage(void) throw();

        //投げたゴミを拾い上げる
    void rescue(void) throw();
};


#endif


